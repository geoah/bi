// Generated by CoffeeScript 1.7.1
(function() {
  var Route, exports, parsePath,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  parsePath = (require("../utils")).parsePath;

  Route = (function() {
    Route.prototype.dispatch = function(bi) {
      var index, next, returnValues, stack;
      index = 0;
      stack = this.router.stack.concat(this.stack);
      console.info(stack);
      returnValues = [];
      next = function(err, returnValue) {
        var layer;
        layer = stack[index++];
        if (err) {
          console.error("" + err);
          return bi.send(err, 500);
        }
        if (returnValue) {
          returnValues.push(returnValue);
        }
        return layer(bi, next);
      };
      return next();
    };

    Route.prototype.match = function(path) {
      var i, key, match, matches, params, _ref;
      params = [];
      matches = this.regexp.exec(path);
      console.info(this.regexp, path);
      if (!matches) {
        return false;
      }
      _ref = matches.slice(1);
      for (i in _ref) {
        match = _ref[i];
        key = this.keys[i] ? this.keys[i].name : false;
        match = typeof match === 'string' ? decodeURIComponent(match) : match;
        if (key) {
          params[key] = match;
        } else {
          params.push(match);
        }
      }
      return params;
    };

    function Route() {
      var methods, path, router, stack;
      router = arguments[0], methods = arguments[1], path = arguments[2], stack = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
      this.match = __bind(this.match, this);
      this.dispatch = __bind(this.dispatch, this);
      this.router = router;
      this.keys = [];
      this.methods = methods;
      this.options = void 0;
      this.path = path;
      this.regexp = parsePath(this.path, this.keys);
      this.stack = stack;
    }

    return Route;

  })();

  exports = module.exports = Route;

}).call(this);

//# sourceMappingURL=route.map
