// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, Route, Router, exports, url,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  Route = require('./route');

  url = require('url');

  Router = (function(_super) {
    __extends(Router, _super);

    Router.prototype.routes = void 0;

    Router.prototype.vhostRegexp = /^(.*)$/i;

    Router.prototype.testVhost = function(hostname) {
      return this.vhostRegexp.test(hostname);
    };

    Router.prototype.resolve = function(ctx) {
      var key, params, paramsObj, pathname, request, route, urlParts, value, _i, _len, _ref, _ref1;
      request = ctx.req;
      if (this.testVhost(request.hostname)) {
        _ref = this.routes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          route = _ref[_i];
          if (request.method != null) {
            if (_ref1 = request.method, __indexOf.call(route.methods, _ref1) >= 0) {
              urlParts = url.parse(request.path, true);
              pathname = urlParts.pathname;
              params = route.match(pathname);
              if (params !== false) {
                paramsObj = {};
                for (key in params) {
                  value = params[key];
                  paramsObj[key] = value;
                }
                ctx.params = paramsObj;
                ctx.query = urlParts.query;
                return route;
              }
            }
          }
        }
      }
      return false;
    };

    Router.prototype.dispatch = function(ctx) {
      var route;
      route = this.resolve(ctx);
      if (route) {
        console.info('Router', 'info', "Matched with route '" + route.methods + " " + route.path + "'");
        route.dispatch(ctx);
        return true;
      } else {
        return false;
      }
    };

    Router.prototype.use = function() {
      var stack;
      stack = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.stack = this.stack.concat(stack);
      return this;
    };

    Router.prototype.route = function() {
      var method, methods, path, route, stack, _i, _len;
      methods = arguments[0], path = arguments[1], stack = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (typeof methods === 'string') {
        methods = [methods];
      }
      for (_i = 0, _len = methods.length; _i < _len; _i++) {
        method = methods[_i];
        method = method.toLowerCase();
      }
      if (path[0] !== '/') {
        path = "/" + path;
      }
      console.info("Adding " + methods + " " + path + ".");
      route = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Route, [this, methods, path].concat(__slice.call(stack)), function(){});
      return this.routes.push(route);
    };

    function Router(routes, vhostRegexp) {
      this.dispatch = __bind(this.dispatch, this);
      this.routes = routes ? routes : [];
      if (vhostRegexp) {
        this.vhostRegexp = vhostRegexp;
      }
      this.stack = [];
    }

    return Router;

  })(EventEmitter);

  exports = module.exports = Router;

}).call(this);

//# sourceMappingURL=router.map
