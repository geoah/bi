// Generated by CoffeeScript 1.7.1
(function() {
  var Handler, HttpHandler, exports, querystring,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Handler = require('./handler');

  querystring = require('querystring');

  HttpHandler = (function(_super) {
    __extends(HttpHandler, _super);

    HttpHandler.prototype.protocol = 'http';

    HttpHandler.prototype.httpServer = void 0;

    HttpHandler.prototype.parseBody = function(httpRequest, httpResponse) {
      var data;
      data = '';
      httpRequest.on('data', (function(_this) {
        return function(chunk) {
          return data += chunk;
        };
      })(this));
      return httpRequest.on('end', (function(_this) {
        return function() {
          var errParsing;
          httpRequest.rawBody = data;
          if (data) {
            try {
              switch (httpRequest.headers['content-type']) {
                case 'application/x-www-form-urlencoded':
                  httpRequest.body = querystring.parse(data);
                  break;
                case 'application/json':
                  httpRequest.body = JSON.parse(data);
                  break;
                default:
                  httpResponse.writeHead(415);
                  httpResponse.end('Unsupported Media Type');
                  return;
              }
            } catch (_error) {
              errParsing = _error;
              httpResponse.writeHead(500);
              httpResponse.end('Could not decode JSON from body.');
              return;
            }
          }
          return _this.normalize(httpRequest, httpResponse);
        };
      })(this));
    };

    HttpHandler.prototype.normalize = function(httpRequest, httpResponse, cb) {
      var ctx, headers;
      headers = httpRequest.headers;
      ctx = {
        transport: 'http',
        http: {
          req: httpRequest,
          res: httpResponse
        },
        req: {
          hostname: httpRequest.hostname,
          method: httpRequest.method.toLowerCase(),
          headers: httpRequest.headers || [],
          body: httpRequest.body,
          query: httpRequest.query || [],
          path: httpRequest.url || ''
        },
        send: function(body) {
          if (typeof body !== "string") {
            body = JSON.stringify(body);
          }
          return httpResponse.end(body);
        }
      };
      return this.dispatch(ctx);
    };

    function HttpHandler(bi) {
      this.bi = bi;
      this.normalize = __bind(this.normalize, this);
      this.parseBody = __bind(this.parseBody, this);
      bi.http.on('request', (function(_this) {
        return function(httpRequest, httpResponse) {
          httpResponse.setHeader('Access-Control-Allow-Origin', '*');
          httpResponse.setHeader('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
          httpResponse.setHeader('Access-Control-Allow-Headers', 'Content-Type, X-Token');
          if (httpRequest.method === 'OPTIONS') {
            return httpResponse.end(void 0);
          }
          return _this.normalize(httpRequest, httpResponse);
        };
      })(this));
    }

    return HttpHandler;

  })(Handler);

  exports = module.exports = HttpHandler;

}).call(this);

//# sourceMappingURL=httpHandler.map
